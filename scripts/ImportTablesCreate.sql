CREATE TABLE VW_IMPORT_AGENT(AGENT_CODE          NUMERIC(5,0)	NOT NULL,	/* agent code.*/IND_IMPORT          NUMERIC(1,0),				/* indicator (0/1) that the mark was imported successfully.*/AGENT_NAME          VARCHAR(700)	NOT NULL,	/* agent name. */NOTES               VARCHAR(254),				/* agent notes. */IND_INACTIVE        NUMERIC(1,0),				/* indicator (0/1) that the agent is inactive. */   CONSTRAINT VW_IMPORT_AGENTS_PK PRIMARY KEY (AGENT_CODE));;
CREATE TABLE VW_IMPORT_AGENT_RESULT(AGENT_CODE          NUMERIC(5,0)	NOT NULL,	/* agent code.*/IND_IMPORT          NUMERIC(1,0),				/* indicator (0/1) that the row was imported successfully */MSG_IMPORT          VARCHAR(300),				/* error message explaining why the row could not be imported. */);;
CREATE TABLE VW_IMPORT_MARK(FILE_SEQ            VARCHAR(2)		NOT NULL,	/* file sequence, using the codes configured in IPAS */FILE_TYPE           VARCHAR(1)		NOT NULL,	/* file type, using the codes configured in IPAS. */FILE_SERIES         NUMERIC(4,0)	NOT NULL,FILE_NBR            NUMERIC(10,0)	NOT NULL,DOC_ORI             VARCHAR(4) ,				/* doc origin, using the codes configured in IPAS */DOC_SERIES          NUMERIC(4,0),DOC_NBR             NUMERIC(15,0),IND_IMPORT          NUMERIC(1,0),				/* indicator (0/1) that the mark was imported successfully */APPLICATION_TYPE    VARCHAR(3)		NOT NULL,	/* application type, using the codes configured in IPAS. */APPLICATION_SUBTYPE VARCHAR(2)		NOT NULL,	/* application subtype, using the codes configured in IPAS. */LAW_CODE            NUMERIC(5,0)	NOT NULL,   /* law code, using the codes configured in IPAS */FILING_DATE         DATETIME		NOT NULL,RECEPTION_DATE      DATETIME		NOT NULL,PUBLICATION_DATE    DATETIME, PUBLICATION_NOTES   VARCHAR(254),IND_REGISTERED      NUMERIC(1,0)	CHECK (IND_REGISTERED IN(0,1)),	/* indicator (0/1) that the file has been registered. */REGISTRATION_TYPE   VARCHAR(5),					/* registration type code, using the codes configured in IPAS. */REGISTRATION_SERIES NUMERIC(4,0),REGISTRATION_NBR    NUMERIC(8,0),REGISTRATION_DUP    VARCHAR(2),REGISTRATION_DATE   DATETIME,ENTITLEMENT_DATE    DATETIME,EXPIRATION_DATE     DATETIME,EXHIBITION_DATE     DATETIME,					/* date on which it was shown in an officially recognised exhibition (INID 230). */EXHIBITION_NOTES    VARCHAR(254),         SIGN_TYPE           VARCHAR(1),					/* type of sign (N = name only, L = logo only, B = both name and logo) (INID 550) */MARK_NAME           VARCHAR(2000), MARK_NAME_LANG2     VARCHAR(2000), MARK_TRANSLATION    VARCHAR(2000),MARK_TRANSLATION_LANG2    VARCHAR(2000),MARK_TRANSLITERATION    VARCHAR(2000),MARK_TRANSLITERATION_LANG2    VARCHAR(2000),SERIES_DESCRIPTION  VARCHAR(254),COLOUR_DESCRIPTION  TEXT,COLOUR_DESCR_LANG2  VARCHAR(2000),DISCLAIMER          VARCHAR(2000),DISCLAIMER_LANG2          VARCHAR(2000),BY_CONSENT          VARCHAR(254),REGULATIONS         VARCHAR(2000),NOTES               TEXT,CAPTURE_USER_ID     NUMERIC(5,0),CAPTURE_DATE        DATETIME,    PUBLICATION_NBR                     NUMERIC(10,0),     /* IPAS-449 Changes */    PUBLICATION_SER                     VARCHAR(10),     PUBLICATION_TYP                     VARCHAR(5),    CONSTRAINT VW_IMPORT_MARK_PK	PRIMARY KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR));;
CREATE TABLE VW_IMPORT_MARK_RESULT(FILE_SEQ            VARCHAR(2)		NOT NULL,	/* file sequence, using the codes configured in IPAS */FILE_TYPE           VARCHAR(1)		NOT NULL,	/* file type, using the codes configured in IPAS. */FILE_SERIES         NUMERIC(4,0)	NOT NULL,FILE_NBR            NUMERIC(10,0)	NOT NULL,IND_IMPORT          NUMERIC(1,0),				/* indicator (0/1) that the mark was imported successfully */MSG_IMPORT          VARCHAR(300),				/* error message explaining why the mark could not be imported. */);;
CREATE INDEX MARK_RESULT ON VW_IMPORT_MARK_RESULT(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_MARK_OWNERS(FILE_SEQ            VARCHAR(2)		NOT NULL,FILE_TYPE           VARCHAR(1)		NOT NULL,FILE_SERIES         NUMERIC(4,0)	NOT NULL,FILE_NBR            NUMERIC(10,0)	NOT NULL,IND_SERVICE         NUMERIC(1,0)	CHECK (IND_SERVICE IN(0,1)),	/* indicator (0/1) that this is the “main owner” supplying the service address for the file. */OWNERSHIP_NOTES     VARCHAR(2000),									/* notes describing how the file ownership is shared among the owners in the list. */PERSON_NAME         VARCHAR(700)	NOT NULL,PERSON_NAME_LANG2   VARCHAR(700),NATIONALITY_COUNTRY_CODE VARCHAR(2) NOT NULL,						/* nationality country code, using the codes configured in IPAS. */IND_COMPANY         NUMERIC(1,0)	CHECK (IND_COMPANY IN(0,1)),	/* indicator (0/1) that the person is a company. */LEGAL_NATURE        VARCHAR(254),									/* legal nature of the company. */LEGAL_NATURE_LANG2  VARCHAR(254),									LEGAL_ID_TYPE       VARCHAR(4),										/* legal identification type, used for both companies and individuals (e.g. tax authorities identification), using the codes configured in IPAS. */LEGAL_ID_NBR        NUMERIC(15,0),									/* legal identification NUMERIC, used in combination with LEGAL_ID_TYPE. */INDIVIDUAL_ID_TYPE  VARCHAR(4),										/* individual identification type, used for individuals but not for companies (e.g. social security identification), using the codes configured in IPAS. */INDIVIDUAL_ID_NBR   NUMERIC(15,0),RESIDENCE_COUNTRY_CODE VARCHAR(2)	NOT NULL,STATE_NAME          VARCHAR(254),STATE_CODE			VARCHAR(6),CITY_NAME           VARCHAR(254),CITY_CODE           VARCHAR(6),ADDRESS_ZONE        VARCHAR(254),ADDRESS_STREET      VARCHAR(2000)  NOT NULL,ADDRESS_STREET_LANG2      VARCHAR(2000),ZIP_CODE            VARCHAR(15),EMAIL               VARCHAR(200),TELEPHONE           VARCHAR(60),PERSON_GROUP_CODE   VARCHAR(8),   CONSTRAINT VW_OWNERS_FK_MARK FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_MARK ON DELETE CASCADE);;
CREATE INDEX MARK_OWNERS ON VW_IMPORT_MARK_OWNERS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_MARK_REPRS(FILE_SEQ            VARCHAR(2)		NOT NULL,FILE_TYPE           VARCHAR(1)		NOT NULL,FILE_SERIES         NUMERIC(4,0)	NOT NULL,FILE_NBR            NUMERIC(10,0)	NOT NULL,IND_SERVICE         NUMERIC(1,0)	CHECK (IND_SERVICE IN(0,1)),	/* indicator (0/1) that this representative is the one supplying the service address for the file. */REPRESENTATIVE_TYPE VARCHAR(2)		NOT NULL,						/* representative type, using the codes configured in IPAS. */AGENT_CODE          NUMERIC(5,0),									/* agent code, using the codes configured in IPAS   */PERSON_NAME         VARCHAR(700)	NOT NULL,PERSON_NAME_LANG2   VARCHAR(700),NATIONALITY_COUNTRY_CODE VARCHAR(2) NOT NULL,IND_COMPANY         NUMERIC(1,0)	CHECK (IND_COMPANY IN(0,1)),	/* indicator (0/1) that the person is a company. */LEGAL_NATURE        VARCHAR(254),									/* legal nature of the company. */LEGAL_NATURE_LANG2  VARCHAR(254),									LEGAL_ID_TYPE       VARCHAR(4),LEGAL_ID_NBR        NUMERIC(15,0),INDIVIDUAL_ID_TYPE  VARCHAR(4),INDIVIDUAL_ID_NBR   NUMERIC(15,0),RESIDENCE_COUNTRY_CODE VARCHAR(2)	NOT NULL,STATE_NAME          VARCHAR(254),STATE_CODE          VARCHAR(6),CITY_NAME           VARCHAR(254),CITY_CODE           VARCHAR(6),ADDRESS_ZONE        VARCHAR(254),ADDRESS_STREET      VARCHAR(2000)  NOT NULL,ADDRESS_STREET_LANG2      VARCHAR(2000),ZIP_CODE            VARCHAR(15),EMAIL               VARCHAR(200),TELEPHONE           VARCHAR(60),PERSON_GROUP_CODE   VARCHAR(8),   CONSTRAINT VW_REPRS_FK_MARK FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_MARK ON DELETE CASCADE);;
CREATE INDEX MARK_REPRS ON VW_IMPORT_MARK_REPRS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_MARK_PRIORITIES(FILE_SEQ            VARCHAR(2)		NOT NULL,FILE_TYPE           VARCHAR(1)		NOT NULL,FILE_SERIES         NUMERIC(4,0)	NOT NULL,FILE_NBR            NUMERIC(10,0)	NOT NULL,COUNTRY_CODE        VARCHAR(2)		NOT NULL,APPLICATION_ID      VARCHAR(30)		NOT NULL,PRIORITY_DATE       DATETIME		NOT NULL,NOTES               VARCHAR(4000),IND_ACCEPTED        NUMERIC(1,0),   CONSTRAINT VW_PRIORITIES_FK_MARK FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_MARK ON DELETE CASCADE);;
CREATE INDEX MARK_PRIORITIES ON VW_IMPORT_MARK_PRIORITIES(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_MARK_VIENNA_CLASSES(FILE_SEQ            VARCHAR(2)		NOT NULL,FILE_TYPE           VARCHAR(1)		NOT NULL,FILE_SERIES         NUMERIC(4,0)	NOT NULL,FILE_NBR            NUMERIC(10,0)	NOT NULL,VIENNA_EDITION_CODE VARCHAR(10) DEFAULT '0' NOT NULL, /* IPAS-1273/1341 Added VIENNA_EDITION_CODE for Vienna classification*/VIENNA_CATEGORY     NUMERIC(2,0)	NOT NULL,VIENNA_DIVISION     NUMERIC(2,0)	NOT NULL,VIENNA_SECTION      NUMERIC(2,0),   CONSTRAINT VW_VIENNA_FK_MARK FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_MARK ON DELETE CASCADE);;
CREATE INDEX MARK_VIENNA_CLASSES ON VW_IMPORT_MARK_VIENNA_CLASSES(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_MARK_NICE_CLASSES(FILE_SEQ				VARCHAR(2)		NOT NULL,FILE_TYPE				VARCHAR(1)		NOT NULL,FILE_SERIES				NUMERIC(4,0)	NOT NULL,FILE_NBR				NUMERIC(10,0)	NOT NULL,NICE_CLASS_VERSION      VARCHAR(10) DEFAULT '0' NOT NULL, /* IPAS-1273/1341 Added NICE_CLASS_VERSION for NICE classification */NICE_CLASS_EDITION		NUMERIC(2,0),NICE_CLASS_NBR			NUMERIC(2,0)	NOT NULL,NICE_CLASS_STATUS		VARCHAR(1),NICE_CLASS_DESCRIPTION	TEXT,NICE_CLASS_DESCR_LANG2	TEXT,   CONSTRAINT VW_NICE_FK_MARK FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_MARK ON DELETE CASCADE);;
CREATE TABLE VW_IMPORT_MARK_NICE_CLASSES_ORIGINAL(FILE_SEQ				VARCHAR(2)		NOT NULL,FILE_TYPE				VARCHAR(1)		NOT NULL,FILE_SERIES				NUMERIC(4,0)	NOT NULL,FILE_NBR				NUMERIC(10,0)	NOT NULL,NICE_CLASS_NBR_ORIGINAL			NUMERIC(2,0)	NOT NULL,NICE_CLASS_NBR_ASSIGNED			NUMERIC(2,0)	NOT NULL);;
CREATE INDEX MARK_NICE_CLASSES ON VW_IMPORT_MARK_NICE_CLASSES(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_MARK_NATL_CLASSES(FILE_SEQ					VARCHAR(2)		NOT NULL,FILE_TYPE					VARCHAR(1)		NOT NULL,FILE_SERIES					NUMERIC(4,0)	NOT NULL,FILE_NBR					NUMERIC(10,0)	NOT NULL,NATIONAL_CLASS_NBR			NUMERIC(4,0)  NOT NULL,NATIONAL_CLASS_DESCRIPTION	TEXT,   CONSTRAINT VW_NATL_FK_MARK FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_MARK ON DELETE CASCADE);;
CREATE INDEX MARK_NATL_CLASSES ON VW_IMPORT_MARK_NATL_CLASSES(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_AGENT_PERSONS(AGENT_CODE          NUMERIC(5,0)	NOT NULL,	/* agent code.*/PERSON_NAME         VARCHAR(700)	NOT NULL,PERSON_NAME_LANG2         VARCHAR(700),NATIONALITY_COUNTRY_CODE VARCHAR(2) NOT NULL,   /* nationality country code, using the codes configured in IPAS. */IND_COMPANY         NUMERIC(1,0)	CHECK (IND_COMPANY IN(0,1)),                /* indicator (0/1) that the person is a company. */LEGAL_NATURE        VARCHAR(254),               /* legal nature of the company. */LEGAL_NATURE_LANG2        VARCHAR(254),               LEGAL_ID_TYPE       VARCHAR(4),                 /* legal identification type, used for both companies and individuals (e.g. tax authorities identification), using the codes configured in IPAS. */LEGAL_ID_NBR        NUMERIC(15,0),              /* legal identification NUMERIC, used in combination with LEGAL_ID_TYPE. */INDIVIDUAL_ID_TYPE  VARCHAR(4),                 /* individual identification type, used for individuals but not for companies (e.g. social security identification), using the codes configured in IPAS. */INDIVIDUAL_ID_NBR   NUMERIC(15,0),RESIDENCE_COUNTRY_CODE VARCHAR(2)	NOT NULL,STATE_NAME          VARCHAR(254),CITY_NAME           VARCHAR(254),CITY_CODE           VARCHAR(6),STATE_CODE			VARCHAR(6),ADDRESS_ZONE        VARCHAR(254),ADDRESS_STREET      VARCHAR(2000)	NOT NULL,ADDRESS_STREET_LANG2      VARCHAR(2000),ZIP_CODE            VARCHAR(15),EMAIL               VARCHAR(200),TELEPHONE           VARCHAR(60),PERSON_GROUP_CODE   VARCHAR(8),   CONSTRAINT VW_AGENT_PERSONS_FK_AGENT FOREIGN KEY (AGENT_CODE)                   REFERENCES VW_IMPORT_AGENT ON DELETE CASCADE);;
CREATE INDEX AGENT_PERSONS ON VW_IMPORT_AGENT_PERSONS(AGENT_CODE);;
CREATE TABLE VW_IMPORT_MARK_ACTIONS(FILE_SEQ            VARCHAR(2)		NOT NULL,FILE_TYPE           VARCHAR(1)		NOT NULL,FILE_SERIES         NUMERIC(4,0)	NOT NULL,FILE_NBR            NUMERIC(10,0)	NOT NULL,ACTION_TYPE         VARCHAR(8)		NOT NULL,	/* action type, using the codes configured in IPAS. */ACTION_DATE         DATETIME		NOT NULL,   /* action date. */MANUAL_DUE_DATE     DATETIME,                   /* process due date to be set manually. */RESPONSIBLE_USER    NUMERIC(6),      /* user receiving reswponsibility */ACTION_NOTES1       TEXT,						/* action notes field 1, depending on the configuration of the action type in IPAS. */ACTION_NOTES2       VARCHAR(254),				/* action notes field 2, depending on the configuration of the action type in IPAS. */ACTION_NOTES3       VARCHAR(254),				/* action notes field 3, depending on the configuration of the action type in IPAS. */ACTION_NOTES4       VARCHAR(254),				/* action notes field 4, depending on the configuration of the action type in IPAS. */ACTION_NOTES5       VARCHAR(254),				/* action notes field 5, depending on the configuration of the action type in IPAS. */GENERAL_NOTES       VARCHAR(254),				/* general notes. */SELECTED_OPTIONS_TEXT  TEXT,ACTION_USER         NUMERIC(6),					/* user that performed the event */ACTION_CATEGORY     VARCHAR(1),					/* indicates the category of the action as follows: */												/* “A”: normal action, which affects the status as indicated in the workflow starting from the current status and using the migration indicated in ACTION_TYPE. If the current status is not compatible with the action type, an error will be raised. */												/* “S”: (default value) special action, which affects the status to the value indicated in SPECIAL_FINAL_STATUS without taking into consideration the current status. */												/* “N”: note action, which does not affect the status. */SPECIAL_FINAL_STATUS VARCHAR(4),				/* in case the action is a special action affecting the status without concern of the normal workflow transitions (i.e. when ACTION_CATEGORY = “S”), this column indicates the desired final status according to the configured statuses in IPAS. Otherwise, the column is not used. */JOURNAL_CODE  VARCHAR(8),PUBLICATION_DATE  DATETIME,IPAS_PROC_TYP  VARCHAR(4) ,IPAS_PROC_NBR  NUMERIC(8),IPAS_ACTION_NBR  NUMERIC(10) ,   CONSTRAINT VW_ACTION_FK_MARK FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_MARK ON DELETE CASCADE);;
CREATE INDEX IMPORT_MARK_ACTION ON VW_IMPORT_MARK_ACTIONS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_MARK_LOGOS(FILE_SEQ            VARCHAR(2)		NOT NULL,FILE_TYPE           VARCHAR(1)		NOT NULL,FILE_SERIES         NUMERIC(4,0)	NOT NULL,FILE_NBR            NUMERIC(10,0)	NOT NULL,LOGO_NBR      		NUMERIC(3,0),   LOGO_IMAGE_TYPE     VARCHAR(3),					/* logo image type (JPG or TIF). */LOGO_IMAGE_DATA     IMAGE,						/* logo image */   CONSTRAINT VW_LOGOS_FK_MARK FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_MARK ON DELETE CASCADE);;
CREATE INDEX LOGOS ON VW_IMPORT_MARK_LOGOS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_MARK_PAYMENTS(FILE_SEQ            VARCHAR(2)		NOT NULL,FILE_TYPE           VARCHAR(1)		NOT NULL,FILE_SERIES         NUMERIC(4,0)	NOT NULL,FILE_NBR            NUMERIC(10,0)	NOT NULL,RECEIPT_NBR 		NUMERIC(15,0)	NOT NULL,RECEIPT_DATE 		DATETIME		NOT NULL,RECEIPT_AMOUNT		NUMERIC(10,2)	NOT NULL,RECEIPT_TYPE 		VARCHAR(8)		NOT NULL,	/* receipt type, using the codes configured in IPAS */CURRENCY_TYPE 		VARCHAR(3)		NOT NULL,	/* currency type, using the codes configured in IPAS */   CONSTRAINT VW_PAYMENTS_FK_MARK FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR) REFERENCES VW_IMPORT_MARK ON DELETE CASCADE);;
CREATE INDEX MARK_PAYMENTS ON VW_IMPORT_MARK_PAYMENTS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_MARK_VALID_STATES(FILE_SEQ            VARCHAR(2)		NOT NULL,FILE_TYPE           VARCHAR(1)		NOT NULL,FILE_SERIES         NUMERIC(4,0)	NOT NULL,FILE_NBR            NUMERIC(10,0)	NOT NULL,COUNTRY_CODE		VARCHAR(2)		NOT NULL,	/* country code, using the codes configured in IPAS */STATE_CODE			VARCHAR(6)		NOT NULL,	/* state code, using the codes configured in IPAS */STATE_STATUS			VARCHAR(1)		NOT NULL,	   CONSTRAINT VW_VALID_STATES_FK_MARK FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR) REFERENCES VW_IMPORT_MARK ON DELETE CASCADE);;
CREATE INDEX MARK_VALID_STATES ON VW_IMPORT_MARK_PAYMENTS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_MARK_RELS(FILE_SEQ            VARCHAR(2)		NOT NULL,FILE_TYPE           VARCHAR(1)		NOT NULL,FILE_SERIES         NUMERIC(4,0)	NOT NULL,FILE_NBR            NUMERIC(10,0)	NOT NULL,RELATIONSHIP_TYPE   VARCHAR(10)		NOT NULL,   /* relationship type, using the codes configured in IPAS. */RELATIONSHIP_ROLE   VARCHAR(1)		NOT NULL,   /* relationship role (“1” = the file is the source of a “forward” relationship towards the related file, “2” = the file is the target of a “backward” relationship from the related file). */RELATED_FILE_SEQ    VARCHAR(2)		NOT NULL,   /* file sequence of the related file. */RELATED_FILE_TYPE   VARCHAR(1)		NOT NULL,   /* file type of the related file. */RELATED_FILE_SERIES NUMERIC(4,0)	NOT NULL,   /* file series of the related file. */RELATED_FILE_NBR    NUMERIC(10,0)	NOT NULL,   /* file number of the related file. */IND_IMPORT          NUMERIC(20,0)				/* indicator (0/1) that the row was imported successfully */);;
CREATE INDEX MARK_RELS ON VW_IMPORT_MARK_RELS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_MARK_RELS_RESULT(FILE_SEQ            VARCHAR(2)		NOT NULL,FILE_TYPE           VARCHAR(1)		NOT NULL,FILE_SERIES         NUMERIC(4,0)	NOT NULL,FILE_NBR            NUMERIC(10,0)	NOT NULL,RELATIONSHIP_TYPE   VARCHAR(10)		NOT NULL,   /* relationship type, using the codes configured in IPAS. */RELATIONSHIP_ROLE   VARCHAR(1)		NOT NULL,   /* relationship role (“1” = the file is the source of a “forward” relationship towards the related file, “2” = the file is the target of a “backward” relationship from the related file). */RELATED_FILE_SEQ    VARCHAR(2)		NOT NULL,   /* file sequence of the related file. */RELATED_FILE_TYPE   VARCHAR(1)		NOT NULL,   /* file type of the related file. */RELATED_FILE_SERIES NUMERIC(4,0)	NOT NULL,   /* file series of the related file. */RELATED_FILE_NBR    NUMERIC(10,0)	NOT NULL,   /* file number of the related file. */IND_IMPORT          NUMERIC(20,0),				/* indicator (0/1) that the row was imported successfully */MSG_IMPORT          VARCHAR(300),				/* error message explaining why the row could not be imported. */);;
CREATE TABLE VW_IMPORT_USERDOC(USERDOC_SEQ				VARCHAR(12)		NOT NULL,          /* user document sequence, using the codes configured in IPAS. */USERDOC_SERIES			NUMERIC(4,0)	NOT NULL,          /* user document series. */USERDOC_NBR				NUMERIC(15,0)	NOT NULL,          /* user document NUMERIC. */DOC_ORI					VARCHAR(4),							/* doc origin, using the codes configured in IPAS */DOC_SERIES				NUMERIC(4,0),DOC_NBR					NUMERIC(15,0),IND_IMPORT				NUMERIC(1,0),						/* indicator (0/1) that the mark was imported successfully. */USERDOC_TYPE			VARCHAR(07)	NOT NULL,				/* user document type, using the codes configured in IPAS. */LAW_CODE				NUMERIC(5,0)	NOT NULL,			/* law code, using the codes configured in IPAS. */FILING_DATE				DATETIME		NOT NULL,           /* filing date. */RECEPTION_DATE			DATETIME		NOT NULL,           /* reception date. */NOTES					VARCHAR(MAX),APPLICANT_NOTES			VARCHAR(254),						/* applicant notes. */PERSON_NAME				VARCHAR(700) ,PERSON_NAME_LANG2				VARCHAR(700) ,NATIONALITY_COUNTRY_CODE VARCHAR(2) ,						/* nationality country code, using the codes configured in IPAS. */IND_COMPANY				NUMERIC(1,0),						/* indicator (0/1) that the person is a company. */LEGAL_NATURE			VARCHAR(254),						/* legal nature of the company. */LEGAL_NATURE_LANG2			VARCHAR(254),						LEGAL_ID_TYPE			VARCHAR(4),							/* legal identification type, used for both companies and individuals (e.g. tax authorities identification), using the codes configured in IPAS. */LEGAL_ID_NBR			NUMERIC(15,0),						/* legal identification NUMERIC, used in combination with LEGAL_ID_TYPE. */INDIVIDUAL_ID_TYPE		VARCHAR(4),							/* individual identification type, used for individuals but not for companies (e.g. social security identification), using the codes configured in IPAS. */INDIVIDUAL_ID_NBR		NUMERIC(15,0),RESIDENCE_COUNTRY_CODE	VARCHAR(2) ,STATE_NAME				VARCHAR(254),STATE_CODE				VARCHAR(6),CITY_NAME				VARCHAR(254),CITY_CODE				VARCHAR(6),ADDRESS_ZONE			VARCHAR(254),ADDRESS_STREET			VARCHAR(2000),ADDRESS_STREET_LANG2			VARCHAR(2000),ZIP_CODE				VARCHAR(15),EMAIL					VARCHAR(200),TELEPHONE				VARCHAR(60),PERSON_GROUP_CODE		VARCHAR(8),CAPTURE_USER_ID 		NUMERIC(5,0),CAPTURE_DATE     		DATETIME,   CONSTRAINT VW_USERDOC_PK PRIMARY KEY(USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR));;
CREATE TABLE VW_IMPORT_USERDOC_RESULT(USERDOC_SEQ     VARCHAR(12)		NOT NULL,		/* user document sequence, using the codes configured in IPAS. */USERDOC_SERIES  NUMERIC(4,0)	NOT NULL,       /* user document series. */USERDOC_NBR     NUMERIC(15,0)	NOT NULL,       /* user document NUMERIC. */IND_IMPORT		NUMERIC(1,0),					/* indicator (0/1) that the mark was imported successfully. */MSG_IMPORT      VARCHAR(300),					/* error message explaining why the mark could not be imported.*/);;
CREATE INDEX USERDOC_RESULT ON VW_IMPORT_USERDOC_RESULT(USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR);;
CREATE TABLE VW_IMPORT_USERDOC_FILES(USERDOC_SEQ      VARCHAR(12)	NOT NULL, /* user document sequence, using the codes configured in IPAS. */USERDOC_SERIES   NUMERIC(4,0)	NOT NULL, /* user document series. */USERDOC_NBR      NUMERIC(15,0)	NOT NULL, /* user document NUMERIC. */FILE_SEQ         VARCHAR(2)		NOT NULL,FILE_TYPE        VARCHAR(1)		NOT NULL,FILE_SERIES      NUMERIC(4,0)	NOT NULL,FILE_NBR         NUMERIC(10,0)	NOT NULL, CONSTRAINT VW_USERDOC_FILES_FK_USERDOC FOREIGN KEY (USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR)                    REFERENCES VW_IMPORT_USERDOC ON DELETE CASCADE);;
CREATE INDEX USERDOC_FILES ON VW_IMPORT_USERDOC_FILES (FILE_SEQ,FILE_TYPE,FILE_SERIES,FILE_NBR);;
CREATE INDEX USERDOC_I1 ON VW_IMPORT_USERDOC(USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR) 
CREATE TABLE VW_IMPORT_USERDOC_REPRS     /* (list of representatives for each user document). */(USERDOC_SEQ			VARCHAR(12)		NOT NULL, /* user document sequence, using the codes configured in IPAS. */USERDOC_SERIES		NUMERIC(4,0)	NOT NULL,          /* user document series. */USERDOC_NBR			NUMERIC(15,0)	NOT NULL,          /* user document NUMERIC. */IND_SERVICE			NUMERIC(1,0)	CHECK (IND_SERVICE IN(0,1)),          /* indicator (0/1) that this representative is the one supplying the service address for the file. */REPRESENTATIVE_TYPE VARCHAR(2)		NOT NULL,           /* representative type, using the codes configured in IPAS. */AGENT_CODE          NUMERIC(5,0),         /* agent code, using the codes configured in IPAS   */PERSON_NAME         VARCHAR(700)	NOT NULL,PERSON_NAME_LANG2         VARCHAR(700),NATIONALITY_COUNTRY_CODE VARCHAR(2) NOT NULL,IND_COMPANY         NUMERIC(1,0)	CHECK (IND_COMPANY IN(0,1)),LEGAL_NATURE        VARCHAR(254),LEGAL_NATURE_LANG2        VARCHAR(254),LEGAL_ID_TYPE       VARCHAR(4),LEGAL_ID_NBR        NUMERIC(15,0),INDIVIDUAL_ID_TYPE  VARCHAR(4),INDIVIDUAL_ID_NBR   NUMERIC(15,0),RESIDENCE_COUNTRY_CODE VARCHAR(2)	NOT NULL,STATE_NAME          VARCHAR(254),STATE_CODE			VARCHAR(6),CITY_NAME           VARCHAR(254),CITY_CODE           VARCHAR(6),ADDRESS_ZONE        VARCHAR(254),ADDRESS_STREET      VARCHAR(2000)  NOT NULL,ADDRESS_STREET_LANG2      VARCHAR(2000),ZIP_CODE            VARCHAR(15),EMAIL               VARCHAR(200),TELEPHONE           VARCHAR(60),PERSON_GROUP_CODE   VARCHAR(8),   CONSTRAINT VW_USERDOC_REPRS_FK_USERDOC FOREIGN KEY (USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR)                    REFERENCES VW_IMPORT_USERDOC ON DELETE CASCADE);;
CREATE INDEX USERDOC_REPRS ON VW_IMPORT_USERDOC_REPRS(USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR);;
CREATE TABLE VW_IMPORT_USERDOC_OWNERS(USERDOC_SEQ			VARCHAR(12)		NOT NULL,          /* user document sequence, using the codes configured in IPAS. */USERDOC_SERIES		NUMERIC(4,0)	NOT NULL,          /* user document series. */USERDOC_NBR			NUMERIC(15,0)	NOT NULL,          /* user document NUMERIC. */IND_SERVICE         NUMERIC(1,0)	CHECK (IND_SERVICE IN(0,1)),                /* indicator (0/1) that this is the “main owner” supplying the service address for the file. */OWNERSHIP_NOTES     VARCHAR(2000),						/* notes describing how the file ownership is shared among the owners in the list. */PERSON_NAME         VARCHAR(700)	NOT NULL,PERSON_NAME_LANG2         VARCHAR(700),NATIONALITY_COUNTRY_CODE VARCHAR(2) NOT NULL,			/* nationality country code, using the codes configured in IPAS. */IND_COMPANY         NUMERIC(1,0)	CHECK (IND_COMPANY IN(0,1)),                /* indicator (0/1) that the person is a company. */LEGAL_NATURE        VARCHAR(254),						/* legal nature of the company. */LEGAL_NATURE_LANG2        VARCHAR(254),						LEGAL_ID_TYPE       VARCHAR(4),							/* legal identification type, used for both companies and individuals (e.g. tax authorities identification), using the codes configured in IPAS. */LEGAL_ID_NBR        NUMERIC(15,0),						/* legal identification NUMERIC, used in combination with LEGAL_ID_TYPE. */INDIVIDUAL_ID_TYPE  VARCHAR(4),							/* individual identification type, used for individuals but not for companies (e.g. social security identification), using the codes configured in IPAS. */INDIVIDUAL_ID_NBR   NUMERIC(15,0),RESIDENCE_COUNTRY_CODE VARCHAR(2)	NOT NULL,STATE_NAME          VARCHAR(254),STATE_CODE			VARCHAR(6),CITY_NAME           VARCHAR(254),CITY_CODE           VARCHAR(6),ADDRESS_ZONE        VARCHAR(254),ADDRESS_STREET      VARCHAR(2000)  NOT NULL,ADDRESS_STREET_LANG2      VARCHAR(2000),ZIP_CODE            VARCHAR(15),EMAIL               VARCHAR(200),TELEPHONE           VARCHAR(60),PERSON_GROUP_CODE   VARCHAR(8),   CONSTRAINT VW_OWNERS_FK_USERDOC FOREIGN KEY (USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR) REFERENCES VW_IMPORT_USERDOC ON DELETE CASCADE);;
CREATE INDEX USERDOC_OWNERS ON VW_IMPORT_USERDOC_OWNERS(USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR);;
CREATE TABLE VW_IMPORT_USERDOC_ACTIONS(USERDOC_SEQ			VARCHAR(12)		NOT NULL,			/* user document sequence, using the codes configured in IPAS. */USERDOC_SERIES		NUMERIC(4,0)	NOT NULL,			/* user document series. */USERDOC_NBR			NUMERIC(15,0)	NOT NULL,			/* user document NUMERIC. */PROCESS_FILE_SEQ    VARCHAR(2),							/* file sequence of the affected file. */PROCESS_FILE_TYPE   VARCHAR(1),							/* file type of the affected file. */PROCESS_FILE_SERIES NUMERIC(4,0),						/* file series of the affected file. */PROCESS_FILE_NBR    NUMERIC(10,0),						/* file number of the affected file. */ACTION_TYPE         VARCHAR(8)		NOT NULL,			/* action type, using the codes configured in IPAS. */ACTION_DATE         DATETIME		NOT NULL,			/* action date. */MANUAL_DUE_DATE     DATETIME,							/* process due date to be set manually. */RESPONSIBLE_USER    NUMERIC(6),      /* user receiving reswponsibility */ACTION_NOTES1       TEXT,								/* action notes field 1, depending on the configuration of the action type in IPAS. */ACTION_NOTES2       VARCHAR(254),						/* action notes field 2, depending on the configuration of the action type in IPAS. */ACTION_NOTES3       VARCHAR(254),						/* action notes field 3, depending on the configuration of the action type in IPAS. */ACTION_NOTES4       VARCHAR(254),						/* action notes field 4, depending on the configuration of the action type in IPAS. */ACTION_NOTES5       VARCHAR(254),						/* action notes field 5, depending on the configuration of the action type in IPAS. */GENERAL_NOTES       VARCHAR(254),						/* general notes. */SELECTED_OPTIONS_TEXT  TEXT, ACTION_USER         NUMERIC(6),							/* user that performed the event */ACTION_CATEGORY     VARCHAR(1),							/* indicates the category of the action as follows: */														/* “A”: normal action, which affects the status as indicated in the workflow starting from the current status and using the migration indicated in ACTION_TYPE. If the current status is not compatible with the action type, an error will be raised. */														/* “S”: (default value)special action, which affects the status to the value indicated in SPECIAL_FINAL_STATUS without taking into consideration the current status. */														/* “N”: note action, which does not affect the status. */SPECIAL_FINAL_STATUS VARCHAR(4),						/* in case the action is a special action affecting the status without concern of the normal workflow transitions (i.e. when ACTION_CATEGORY = “S”), this column indicates the desired final status according to the configured statuses in IPAS. Otherwise, the column is not used. */JOURNAL_CODE  VARCHAR(8),PUBLICATION_DATE  DATETIME,IPAS_PROC_TYP  VARCHAR(4) ,IPAS_PROC_NBR  NUMERIC(8),IPAS_ACTION_NBR  NUMERIC(10) ,   CONSTRAINT VW_ACTION_FK_USERDOC FOREIGN KEY (USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR)                   REFERENCES VW_IMPORT_USERDOC ON DELETE CASCADE);;
CREATE INDEX USERDOC_ACTION ON VW_IMPORT_USERDOC_ACTIONS(USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR);;
CREATE TABLE VW_IMPORT_USERDOC_PAYMENTS(USERDOC_SEQ			VARCHAR(12)		NOT NULL,		/* user document sequence, using the codes configured in IPAS. */USERDOC_SERIES		NUMERIC(4,0)	NOT NULL,       /* user document series. */USERDOC_NBR			NUMERIC(15,0)	NOT NULL,       /* user document NUMERIC. */RECEIPT_NBR			NUMERIC(15,0)	NOT NULL,RECEIPT_DATE 		DATETIME		NOT NULL,RECEIPT_AMOUNT		NUMERIC(10,2)	NOT NULL,RECEIPT_TYPE 		VARCHAR(8)		NOT NULL,		/* receipt type, using the codes configured in IPAS */CURRENCY_TYPE 		VARCHAR(3)		NOT NULL,		/* currency type, using the codes configured in IPAS */CONSTRAINT VW_PAYMENTS_FK_USERDOC FOREIGN KEY (USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR)                   REFERENCES VW_IMPORT_USERDOC ON DELETE CASCADE);;
CREATE INDEX USERDOC_PAYMENTS_I1 ON VW_IMPORT_USERDOC_PAYMENTS(USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR);;
CREATE TABLE VW_IMPORT_PATENT(FILE_SEQ            VARCHAR(2)  NOT NULL, /* file sequence, using the codes configured in IPAS */FILE_TYPE           VARCHAR(1)  NOT NULL, /* file type, using the codes configured in IPAS. */FILE_SERIES         NUMERIC(4,0) NOT NULL,FILE_NBR            NUMERIC(10,0) NOT NULL,DOC_ORI             VARCHAR(4) , /* doc origin, using the codes configured in IPAS */DOC_SERIES         	NUMERIC(4,0),DOC_NBR            	NUMERIC(15,0),IND_IMPORT          NUMERIC(20,0),         /* indicator (0/1) that the mark was imported successfully */APPLICATION_TYPE    VARCHAR(3) NOT NULL, /* application type, using the codes configured in IPAS. */APPLICATION_SUBTYPE VARCHAR(2),          /* application subtype, using the codes configured in IPAS. */LAW_CODE            NUMERIC(5,0),         /* law code, using the codes configured in IPAS */FILING_DATE         DATETIME,RECEPTION_DATE      DATETIME,PUBLICATION_DATE    DATETIME, PUBLICATION_NOTES   VARCHAR(254),IND_REGISTERED      NUMERIC(1,0),         /* indicator (0/1) that the file has been registered. */REGISTRATION_TYPE   VARCHAR(5),          /* registration type code, using the codes configured in IPAS. */REGISTRATION_SERIES NUMERIC(4,0),REGISTRATION_NBR    NUMERIC(10,0),REGISTRATION_DUP    VARCHAR(2),REGISTRATION_DATE   DATETIME,ENTITLEMENT_DATE    DATETIME,EXPIRATION_DATE     DATETIME,EXHIBITION_DATE     DATETIME,                /* date on which it was shown in an officially recognised exhibition (INID 230). */EXHIBITION_NOTES    VARCHAR(254),         /* */PCT_PHASE           NUMERIC(1,0),        /* PCT phase (1=phase 1, 2=phase 2). */PCT_APPLICATION_ID  VARCHAR(20),         /* Changes length for PCT application id  FOR JIRA 1094 */PCT_APPLICATION_DATE DATETIME,           /* PCT application date. */PCT_PUBLICATION_COUNTRY_CODE VARCHAR(2), /* PCT publication country code. */PCT_PUBLICATION_DATE DATETIME,           /* PCT publication date. */PCT_PUBLICATION_TYPE VARCHAR(2),         /* PCT publication type. */PCT_PUBLICATION_ID   VARCHAR(25),        /* PCT publication id. */TITLE                VARCHAR(4000),        /* title. */ /* IPAS-740 */ABSTRACT             TEXT,               /* abstract. */ENGLISH_TITLE        VARCHAR(4000),       /* title translated into English. */ /* IPAS-740 */ENGLISH_ABSTRACT     TEXT,               /* abstract translated into English. */LAST_CLAIMS_PAGE_REF VARCHAR(254),        /* page reference to the last filed claims in the document. */LAST_DESCRIPTION_PAGE_REF VARCHAR(254),   /* page reference to the last filed description in the document. */USED_IPC_DESCRIPTION VARCHAR(254),        /* description of IPC classes used for examination. */USED_KEYWORD_DESCRIPTION VARCHAR(254),    /* description of keywords used for examination. */IND_EXAM_INDUSTRIAL  NUMERIC(1,0),       /* indicator (0/1) that the industrial applicability requirement is fulfilled. */IND_EXAM_INVENTIVE   NUMERIC(1,0),       /* indicator (0/1) that the inventive step requirement is fulfilled. */IND_EXAM_NOVELTY     NUMERIC(1,0),       /* indicator (0/1) that the novelty requirement is fulfilled. */EXAM_RESULT          VARCHAR(254),        /* description of examination result. */  	SPECIAL_PUBL_APPL_DATE  DATETIME,                 /* date on which an application was made to set a special publication date */SPECIAL_PUBL_REQU_DATE  DATETIME,                 /* requested special publication date */REGIONAL_APPL_ID  VARCHAR(15),          /* regional application id. */REGIONAL_APPL_DATE DATETIME,                 /* regional application date. */REGIONAL_PUBL_COUNTRY_CODE VARCHAR(2),  /* regional publication country code. */REGIONAL_PUBL_DATE DATETIME,                 /* regional publication date. */REGIONAL_PUBL_TYPE VARCHAR(2),          /* regional publication type. */REGIONAL_PUBL_ID   VARCHAR(25),         /* regional publication id. */NOTES               TEXT,CAPTURE_USER_ID 		NUMERIC(5,0),CAPTURE_DATE     		DATETIME,    PUBLICATION_NBR                    NUMERIC(10,0),     /* IPAS-449 Changes */    PUBLICATION_SER                    VARCHAR(10) ,     PUBLICATION_TYP                    VARCHAR(5),       CONSTRAINT VW_IMPORT_PATENT_PK_PATENT PRIMARY KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR));;
CREATE TABLE VW_IMPORT_PATENT_RESULT(FILE_SEQ            VARCHAR(2)  NOT NULL, /* file sequence, using the codes configured in IPAS */FILE_TYPE           VARCHAR(1)  NOT NULL, /* file type, using the codes configured in IPAS. */FILE_SERIES         NUMERIC(4,0) NOT NULL,FILE_NBR            NUMERIC(10,0) NOT NULL,IND_IMPORT          NUMERIC(1,0),         /* indicator (0/1) that the mark was imported successfully */MSG_IMPORT          VARCHAR(300),         /* error message explaining why the mark could not be imported. */);;
CREATE INDEX PATENT_RESULT ON VW_IMPORT_PATENT_RESULT(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_PATENT_OWNERS(FILE_SEQ            VARCHAR(2)		NOT NULL,FILE_TYPE           VARCHAR(1)		NOT NULL,FILE_SERIES         NUMERIC(4,0)	NOT NULL,FILE_NBR            NUMERIC(10,0)	NOT NULL,IND_SERVICE         NUMERIC(1,0)	CHECK (IND_SERVICE IN(0,1)),	/* indicator (0/1) that this is the “main owner” supplying the service address for the file. */OWNERSHIP_NOTES     VARCHAR(2000),									/* notes describing how the file ownership is shared among the owners in the list. */PERSON_NAME         VARCHAR(700)	NOT NULL,PERSON_NAME_LANG2         VARCHAR(700),NATIONALITY_COUNTRY_CODE VARCHAR(2) NOT NULL,						/* nationality country code, using the codes configured in IPAS. */IND_COMPANY         NUMERIC(1,0)	CHECK (IND_COMPANY IN(0,1)),	/* indicator (0/1) that the person is a company. */LEGAL_NATURE        VARCHAR(254),									/* legal nature of the company. */LEGAL_NATURE_LANG2        VARCHAR(254),									LEGAL_ID_TYPE       VARCHAR(4),										/* legal identification type, used for both companies and individuals (e.g. tax authorities identification), using the codes configured in IPAS. */LEGAL_ID_NBR        NUMERIC(15,0),									/* legal identification NUMERIC, used in combination with LEGAL_ID_TYPE. */INDIVIDUAL_ID_TYPE  VARCHAR(4),										/* individual identification type, used for individuals but not for companies (e.g. social security identification), using the codes configured in IPAS. */INDIVIDUAL_ID_NBR   NUMERIC(15,0),RESIDENCE_COUNTRY_CODE VARCHAR(2)	NOT NULL,STATE_NAME          VARCHAR(254),STATE_CODE			VARCHAR(6),CITY_NAME           VARCHAR(254),CITY_CODE           VARCHAR(6),ADDRESS_ZONE        VARCHAR(254),ADDRESS_STREET      VARCHAR(2000)  NOT NULL,ADDRESS_STREET_LANG2      VARCHAR(2000),ZIP_CODE            VARCHAR(15),EMAIL               VARCHAR(200),TELEPHONE           VARCHAR(60),PERSON_GROUP_CODE   VARCHAR(8),   CONSTRAINT VW_OWNERS_FK_PATENT FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_PATENT ON DELETE CASCADE);;
CREATE INDEX PATENT_OWNERS ON VW_IMPORT_PATENT_OWNERS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_PATENT_REPRS(FILE_SEQ            VARCHAR(2)		NOT NULL,FILE_TYPE           VARCHAR(1)		NOT NULL,FILE_SERIES         NUMERIC(4,0)	NOT NULL,FILE_NBR            NUMERIC(10,0)	NOT NULL,IND_SERVICE         NUMERIC(1,0)	CHECK (IND_SERVICE IN(0,1)),	/* indicator (0/1) that this representative is the one supplying the service address for the file. */REPRESENTATIVE_TYPE VARCHAR(2)		NOT NULL,						/* representative type, using the codes configured in IPAS. */AGENT_CODE          NUMERIC(5,0),									/* agent code, using the codes configured in IPAS   */PERSON_NAME         VARCHAR(700)	NOT NULL,PERSON_NAME_LANG2         VARCHAR(700),NATIONALITY_COUNTRY_CODE VARCHAR(2) NOT NULL,IND_COMPANY         NUMERIC(1,0)	CHECK (IND_COMPANY IN(0,1)),	/* indicator (0/1) that the person is a company. */LEGAL_NATURE        VARCHAR(254),									/* legal nature of the company. */LEGAL_NATURE_LANG2        VARCHAR(254),									LEGAL_ID_TYPE       VARCHAR(4),LEGAL_ID_NBR        NUMERIC(15,0),INDIVIDUAL_ID_TYPE  VARCHAR(4),INDIVIDUAL_ID_NBR   NUMERIC(15,0),RESIDENCE_COUNTRY_CODE VARCHAR(2)	NOT NULL,STATE_NAME          VARCHAR(254),STATE_CODE          VARCHAR(6),CITY_NAME           VARCHAR(254),CITY_CODE           VARCHAR(6),ADDRESS_ZONE        VARCHAR(254),ADDRESS_STREET      VARCHAR(2000)  NOT NULL,ADDRESS_STREET_LANG2      VARCHAR(2000),ZIP_CODE            VARCHAR(15),EMAIL               VARCHAR(200),TELEPHONE           VARCHAR(60),PERSON_GROUP_CODE   VARCHAR(8),   CONSTRAINT VW_REPRS_FK_PATENT FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_PATENT ON DELETE CASCADE);;
CREATE INDEX PATENT_REPRS ON VW_IMPORT_PATENT_REPRS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_PATENT_PRIORITIES(FILE_SEQ            VARCHAR(2)  NOT NULL,FILE_TYPE           VARCHAR(1)  NOT NULL,FILE_SERIES         NUMERIC(4,0) NOT NULL,FILE_NBR            NUMERIC(10,0) NOT NULL,COUNTRY_CODE        VARCHAR(2) NOT NULL,APPLICATION_ID      VARCHAR(30) NOT NULL,PRIORITY_DATE       DATETIME NOT NULL,NOTES               VARCHAR(4000),IND_ACCEPTED        NUMERIC(1,0),   CONSTRAINT VW_PRIORITIES_FK_PATENT FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)           REFERENCES VW_IMPORT_PATENT ON DELETE CASCADE);;
CREATE INDEX PATENT_PRIORITIES ON VW_IMPORT_PATENT_PRIORITIES(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_PATENT_IPC_CLASSES(FILE_SEQ            VARCHAR(2)  NOT NULL,FILE_TYPE           VARCHAR(1)  NOT NULL,FILE_SERIES         NUMERIC(4,0) NOT NULL,FILE_NBR            NUMERIC(10,0) NOT NULL,IPC_EDITION         VARCHAR(20),         /* IPC edition, using the codes configured in IPAS.; Lenght of IPC edition extended */IPC_SECTION         VARCHAR(1),         /* IPC section, using the codes configured in IPAS. */IPC_CLASS           VARCHAR(2),         /* IPC class, using the codes configured in IPAS. */IPC_SUBCLASS        VARCHAR(2),         /* IPC subclass, using the codes configured in IPAS. */IPC_GROUP           VARCHAR(3),         /* IPC group, using the codes configured in IPAS. */IPC_SUBGROUP        VARCHAR(5),         /* IPC subgroup, using the codes configured in IPAS. */IPC_QUALIFICATION   VARCHAR(1),         /* IPC qualification code, as per standard ST.8 (“A” = first classification symbol representing invention information, “B” = other classification symbols representing invention information, “-“ = classification symbols representing additional information, etc). */   CONSTRAINT VW_IPC_FK_PATENT FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_PATENT ON DELETE CASCADE);;
CREATE INDEX PATENT_IPC_CLASS ON VW_IMPORT_PATENT_IPC_CLASSES(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_PATENT_LOCAR_CLASSES(FILE_SEQ            VARCHAR(2)  NOT NULL,FILE_TYPE           VARCHAR(1)  NOT NULL,FILE_SERIES         NUMERIC(4,0) NOT NULL,FILE_NBR            NUMERIC(10,0) NOT NULL,LOCARNO_CLASS_NBR   NUMERIC(2),           /* Locarno class number, using the codes configured in IPAS. */LOCARNO_SUBCLASS_NBR NUMERIC(2),          /* Locarno subclass number, using the codes configured in IPAS. */LOCARNO_EDITION_CODE VARCHAR(10) ,       /* Added LOCARNO_EDITION_CODE Field :IPAS-1273 */   CONSTRAINT VW_LOCARNO_FK_PATENT FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_PATENT ON DELETE CASCADE);;
CREATE INDEX PATENT_LOCARNO_CLASS ON VW_IMPORT_PATENT_LOCAR_CLASSES(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_PATENT_RELS(FILE_SEQ            VARCHAR(2)  NOT NULL,FILE_TYPE           VARCHAR(1)  NOT NULL,FILE_SERIES         NUMERIC(4,0) NOT NULL,FILE_NBR            NUMERIC(10,0) NOT NULL,RELATIONSHIP_TYPE   VARCHAR(10) NOT NULL,     /* relationship type, using the codes configured in IPAS. */RELATIONSHIP_ROLE   VARCHAR(1)  NOT NULL,     /* relationship role (“1” = the file is the source of a “forward” relationship towards the related file, “2” = the file is the target of a “backward” relationship from the related file). */RELATED_FILE_SEQ    VARCHAR(2) NOT NULL,      /* file sequence of the related file. */RELATED_FILE_TYPE   VARCHAR(1) NOT NULL,      /* file type of the related file. */RELATED_FILE_SERIES NUMERIC(4,0) NOT NULL,    /* file series of the related file. */RELATED_FILE_NBR    NUMERIC(10,0) NOT NULL,    /* file number of the related file. */IND_IMPORT          NUMERIC(1,0),         /* indicator (0/1) that the row was imported successfully */   CONSTRAINT VW_RELS_FK_PATENT FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_PATENT ON DELETE CASCADE);;
CREATE INDEX PATENT_RELS ON VW_IMPORT_PATENT_RELS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_PATENT_RELS_RESULT(    FILE_SEQ            VARCHAR(2)  NOT NULL,    FILE_TYPE           VARCHAR(1)  NOT NULL,    FILE_SERIES         NUMERIC(4,0) NOT NULL,    FILE_NBR            NUMERIC(10,0) NOT NULL,    RELATIONSHIP_TYPE   VARCHAR(10) NOT NULL,     /* relationship type, using the codes configured in IPAS. */    RELATIONSHIP_ROLE   VARCHAR(1)  NOT NULL,     /* relationship role (“1” = the file is the source of a “forward” relationship towards the related file, “2” = the file is the target of a “backward” relationship from the related file). */    RELATED_FILE_SEQ    VARCHAR(2) NOT NULL,      /* file sequence of the related file. */    RELATED_FILE_TYPE   VARCHAR(1) NOT NULL,      /* file type of the related file. */    RELATED_FILE_SERIES NUMERIC(4,0) NOT NULL,    /* file series of the related file. */    RELATED_FILE_NBR    NUMERIC(10,0) NOT NULL,    /* file number of the related file. */    IND_IMPORT          NUMERIC(1,0),            /* indicator (0/1) that the row was imported successfully */    MSG_IMPORT          VARCHAR(300)           /* error message explaining why the row could not be imported. */);;
CREATE TABLE VW_IMPORT_PATENT_CLAIMS(FILE_SEQ            VARCHAR(2)  NOT NULL,FILE_TYPE           VARCHAR(1)  NOT NULL,FILE_SERIES         NUMERIC(4,0) NOT NULL,FILE_NBR            NUMERIC(10,0) NOT NULL,CLAIM_NBR           NUMERIC(3,0),        /* claim number. */CLAIM_DESCRIPTION   TEXT,                /* claim description. */CLAIM_ENGLISH_DESCRIPTION TEXT,          /* claim description translated into English. */   CONSTRAINT VW_CLAIMS_FK_PATENT FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR) REFERENCES VW_IMPORT_PATENT ON DELETE CASCADE);;
CREATE INDEX PATENT_CLAIMS ON VW_IMPORT_PATENT_CLAIMS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_PATENT_EXAMDOCS(FILE_SEQ            VARCHAR(2)  NOT NULL,FILE_TYPE           VARCHAR(1)  NOT NULL,FILE_SERIES         NUMERIC(4,0) NOT NULL,FILE_NBR            NUMERIC(10,0) NOT NULL,REF_NBR             NUMERIC(3,1),          /* reference number. */REF_CATEG_CODE      VARCHAR(1),            /* reference category, as per WIPO standard ST.14. */REF_AFFECTS_CLAIMS  VARCHAR(254),           /* description of the claims affected by the referenced document. */REF_DESCRIPTION     VARCHAR(30),           /* description of the reference document. */   CONSTRAINT VW_EXAMDOCS_FK_PATENT FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR) REFERENCES VW_IMPORT_PATENT ON DELETE CASCADE);;
CREATE INDEX PATENT_EXAMDOCS ON VW_IMPORT_PATENT_EXAMDOCS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_PATENT_INVENTORS(FILE_SEQ				VARCHAR(2)  NOT NULL,FILE_TYPE				VARCHAR(1)  NOT NULL,FILE_SERIES				NUMERIC(4,0) NOT NULL,FILE_NBR				NUMERIC(10,0) NOT NULL,IND_OWNER_SAME_AUTHOR	NUMERIC(1,0) NOT NULL,         /* indicator (0/1) that the owner is also the author. */AUTHOR_SEQ				NUMERIC(3,0) NOT NULL,          /* author sequence. */PERSON_NAME         VARCHAR(700)	NOT NULL,PERSON_NAME_LANG2         VARCHAR(700),NATIONALITY_COUNTRY_CODE VARCHAR(2) NOT NULL,IND_COMPANY         NUMERIC(1,0)	CHECK (IND_COMPANY IN(0,1)),	/* indicator (0/1) that the person is a company. */LEGAL_NATURE        VARCHAR(254),									/* legal nature of the company. */LEGAL_NATURE_LANG2        VARCHAR(254),									LEGAL_ID_TYPE       VARCHAR(4),LEGAL_ID_NBR        NUMERIC(15,0),INDIVIDUAL_ID_TYPE  VARCHAR(4),INDIVIDUAL_ID_NBR   NUMERIC(15,0),RESIDENCE_COUNTRY_CODE VARCHAR(2)	NOT NULL,STATE_NAME          VARCHAR(254),STATE_CODE          VARCHAR(6),CITY_NAME           VARCHAR(254),CITY_CODE           VARCHAR(6),ADDRESS_ZONE        VARCHAR(254),ADDRESS_STREET      VARCHAR(2000)  NOT NULL,ADDRESS_STREET_LANG2      VARCHAR(2000),ZIP_CODE            VARCHAR(15),EMAIL               VARCHAR(200),TELEPHONE           VARCHAR(60),PERSON_GROUP_CODE   VARCHAR(8),   CONSTRAINT VW_INVENTORS_FK_PATENT FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_PATENT ON DELETE CASCADE);;
CREATE INDEX PATENT_INVENTORS ON VW_IMPORT_PATENT_INVENTORS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_PATENT_ANNUITIES(FILE_SEQ            VARCHAR(2)  NOT NULL,FILE_TYPE           VARCHAR(1)  NOT NULL,FILE_SERIES         NUMERIC(4,0) NOT NULL,FILE_NBR            NUMERIC(10,0) NOT NULL,ANNUITY_NBR        NUMERIC(2,0),      /* annuity number. */EXPIRATION_DATE    DATETIME,             /* (date): annuity expiration date.  */GRACE_DATE         DATETIME,             /* annuity grace date. */IND_IGNORE         NUMERIC(1,0),      /* indicator (0/1) that the annuity should be ignored for the purposes of payment control. */IND_PAID           NUMERIC(1,0),      /* indicator (0/1) that the annuity has been already paid. */COMPLETE_PAYMENT_DATE DATETIME,          /* date on which complete payment took place.  */   CONSTRAINT VW_ANNUITIES_FK_PATENT FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR) REFERENCES VW_IMPORT_PATENT ON DELETE CASCADE);;
CREATE INDEX PATENT_ANNUITIES ON VW_IMPORT_PATENT_ANNUITIES(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_PATENT_ACTIONS(FILE_SEQ            VARCHAR(2)  NOT NULL,FILE_TYPE           VARCHAR(1)  NOT NULL,FILE_SERIES         NUMERIC(4,0)  NOT NULL,FILE_NBR            NUMERIC(10,0) NOT NULL,ACTION_TYPE         VARCHAR(8) NOT NULL,   /* action type, using the codes configured in IPAS. */ACTION_DATE         DATETIME       NOT NULL,   /* action date. */MANUAL_DUE_DATE     DATETIME,                  /* process due date to be set manually. */RESPONSIBLE_USER    NUMERIC(6),      /* user receiving reswponsibility */ACTION_NOTES1       TEXT,                  /* action notes field 1, depending on the configuration of the action type in IPAS. */ACTION_NOTES2       VARCHAR(300),          /* action notes field 2, depending on the configuration of the action type in IPAS. */ACTION_NOTES3       VARCHAR(300),          /* action notes field 3, depending on the configuration of the action type in IPAS. */ACTION_NOTES4       VARCHAR(300),          /* action notes field 4, depending on the configuration of the action type in IPAS. */ACTION_NOTES5       VARCHAR(300),          /* action notes field 5, depending on the configuration of the action type in IPAS. */GENERAL_NOTES       VARCHAR(300),           /* general notes. */SELECTED_OPTIONS_TEXT  TEXT, ACTION_ORDER        NUMERIC(10),           /* orden de las acciones (numero de mov) */ACTION_USER         NUMERIC(6),             /* user that performed the event */ACTION_CATEGORY     VARCHAR(1),				/* indicates the category of the action as follows: */                                            /* “A”: normal action, which affects the status as indicated in the workflow starting from the current status and using the migration indicated in ACTION_TYPE. If the current status is not compatible with the action type, an error will be raised. */                                            /* “S”: (default value) special action, which affects the status to the value indicated in SPECIAL_FINAL_STATUS without taking into consideration the current status. */                                            /* “N”: note action, which does not affect the status. */SPECIAL_FINAL_STATUS VARCHAR(4),            /* in case the action is a special action affecting the status without concern of the normal workflow transitions (i.e. when ACTION_CATEGORY = “S”), this column indicates the desired final status according to the configured statuses in IPAS. Otherwise, the column is not used. */JOURNAL_CODE  VARCHAR(8),PUBLICATION_DATE  DATETIME,IPAS_PROC_TYP  VARCHAR(4) ,IPAS_PROC_NBR  NUMERIC(8),IPAS_ACTION_NBR  NUMERIC(10) ,   CONSTRAINT VW_ACTION_FK_PATENT FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_PATENT ON DELETE CASCADE);;
CREATE INDEX IMPORT_PATENT_ACTION ON VW_IMPORT_PATENT_ACTIONS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE INDEX IMPORT_MARK_PATENT_I2 ON VW_IMPORT_PATENT_ACTIONS(ACTION_ORDER);;
CREATE TABLE VW_IMPORT_PATENT_DRAWINGS(FILE_SEQ            VARCHAR(2)  NOT NULL,FILE_TYPE           VARCHAR(1)  NOT NULL,FILE_SERIES         NUMERIC(4,0) NOT NULL,FILE_NBR            NUMERIC(10,0) NOT NULL,DRAWING_NBR      			NUMERIC(3,0),   DRAWING_IMAGE_TYPE  VARCHAR(3), /* logo image type (JPG or TIF). */DRAWING_IMAGE_DATA  IMAGE,  		 /* logo image */   CONSTRAINT VW_DRAWING_FK_PATENT FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_PATENT ON DELETE CASCADE);;
CREATE INDEX DRAWINGS ON VW_IMPORT_PATENT_DRAWINGS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_PATENT_PAYMENTS(FILE_SEQ            VARCHAR(2)  NOT NULL,FILE_TYPE           VARCHAR(1)  NOT NULL,FILE_SERIES         NUMERIC(4,0) NOT NULL,FILE_NBR            NUMERIC(10,0) NOT NULL,RECEIPT_NBR 		NUMERIC(15,0),RECEIPT_DATE 		DATETIME,RECEIPT_AMOUNT		NUMERIC(10,2),RECEIPT_TYPE 		VARCHAR(8), /* receipt type, using the codes configured in IPAS */CURRENCY_TYPE 		VARCHAR(3), /* currency type, using the codes configured in IPAS */   CONSTRAINT VW_PAYMENTS_FK_PATENT FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_PATENT ON DELETE CASCADE);;
CREATE INDEX PATENT_PAYMENTS ON VW_IMPORT_PATENT_PAYMENTS(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_MARK_FILE_FREEZES(FILE_SEQ            VARCHAR(2)		NOT NULL,FILE_TYPE           VARCHAR(1)		NOT NULL,FILE_SERIES         NUMERIC(4,0)	NOT NULL,FILE_NBR            NUMERIC(10,0)	NOT NULL,FREEZING_FILE_SEQ   VARCHAR(2)		NOT NULL,FREEZING_FILE_TYPE  VARCHAR(1)		NOT NULL,FREEZING_FILE_SERIES NUMERIC(4,0)	NOT NULL,FREEZING_FILE_NBR   NUMERIC(10,0)	NOT NULL,IND_IMPORT          NUMERIC(1,0),	/* indicator (0/1) that the row was imported successfully */   CONSTRAINT VW_MARK_FILE_FREEZES_FK_MARK FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR) REFERENCES VW_IMPORT_MARK  ON DELETE CASCADE,   CONSTRAINT VW_MARK_FILE_FREEZES_FK_MARK2 FOREIGN KEY (FREEZING_FILE_SEQ, FREEZING_FILE_TYPE, FREEZING_FILE_SERIES, FREEZING_FILE_NBR) REFERENCES VW_IMPORT_MARK  ON DELETE NO ACTION);;
CREATE INDEX MARK_FILE_FREEZES ON VW_IMPORT_MARK_FILE_FREEZES(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_MARK_FI_FRZ_RESULT(    FILE_SEQ            VARCHAR(2)  NOT NULL,    FILE_TYPE           VARCHAR(1)  NOT NULL,    FILE_SERIES         NUMERIC(4,0) NOT NULL,    FILE_NBR            NUMERIC(10,0) NOT NULL,    FREEZING_FILE_SEQ   VARCHAR(2)  NOT NULL,    FREEZING_FILE_TYPE  VARCHAR(1)  NOT NULL,    FREEZING_FILE_SERIES NUMERIC(4,0) NOT NULL,    FREEZING_FILE_NBR   NUMERIC(10,0) NOT NULL,    IND_IMPORT          NUMERIC(20,0),         /* indicator (0/1) that the row was imported successfully */    MSG_IMPORT          VARCHAR(300)         /* error message explaining why the row could not be imported. */);;
CREATE TABLE VW_IMPORT_MARK_UDOC_FREEZES(FILE_SEQ            VARCHAR(2)  NOT NULL,FILE_TYPE           VARCHAR(1)  NOT NULL,FILE_SERIES         NUMERIC(4) NOT NULL,FILE_NBR            NUMERIC(10) NOT NULL,FREEZING_USERDOC_SEQ      VARCHAR(12) NOT NULL,FREEZING_USERDOC_SERIES   NUMERIC(4) NOT NULL,FREEZING_USERDOC_NBR      NUMERIC(15) NOT NULL,IND_IMPORT          NUMERIC(1,0),				/* indicator (0/1) that the row was imported successfully */   CONSTRAINT VW_MARK_UDOC_FREEZES_FK_MARK FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR) REFERENCES VW_IMPORT_MARK  ON DELETE CASCADE,   CONSTRAINT VW_MARK_UDOC_FREEZES_FK_UDOC FOREIGN KEY (FREEZING_USERDOC_SEQ, FREEZING_USERDOC_SERIES, FREEZING_USERDOC_NBR) REFERENCES VW_IMPORT_USERDOC ON DELETE CASCADE);;
CREATE INDEX MARK_USERDOC_FREEZES ON VW_IMPORT_MARK_UDOC_FREEZES(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_MARK_UD_FRZ_RESULT(    FILE_SEQ            VARCHAR(2)  NOT NULL,    FILE_TYPE           VARCHAR(1)  NOT NULL,    FILE_SERIES         NUMERIC(4,0) NOT NULL,    FILE_NBR            NUMERIC(10,0) NOT NULL,    FREEZING_USERDOC_SEQ      VARCHAR(12) NOT NULL,    FREEZING_USERDOC_SERIES   NUMERIC(4,0) NOT NULL,    FREEZING_USERDOC_NBR      NUMERIC(15,0) NOT NULL,    IND_IMPORT          NUMERIC(20,0),         /* indicator (0/1) that the row was imported successfully */    MSG_IMPORT          VARCHAR(300)         /* error message explaining why the row could not be imported. */);;
CREATE TABLE VW_IMPORT_PATENT_FILE_FREEZES(FILE_SEQ            VARCHAR(2)  NOT NULL,FILE_TYPE           VARCHAR(1)  NOT NULL,FILE_SERIES         NUMERIC(4,0) NOT NULL,FILE_NBR            NUMERIC(10,0) NOT NULL,FREEZING_FILE_SEQ   VARCHAR(2)  NOT NULL,FREEZING_FILE_TYPE  VARCHAR(1)  NOT NULL,FREEZING_FILE_SERIES NUMERIC(4,0) NOT NULL,FREEZING_FILE_NBR   NUMERIC(10,0) NOT NULL,IND_IMPORT          NUMERIC(1,0),				/* indicator (0/1) that the row was imported successfully */   CONSTRAINT VW_PAT_FILE_FREEZES_FK_PAT FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR)                   REFERENCES VW_IMPORT_PATENT ON DELETE CASCADE,   CONSTRAINT VW_PAT_FIKE_FREEZES_FK_PAT2 FOREIGN KEY (FREEZING_FILE_SEQ, FREEZING_FILE_TYPE, FREEZING_FILE_SERIES, FREEZING_FILE_NBR)                   REFERENCES VW_IMPORT_PATENT ON DELETE NO ACTION);;
CREATE INDEX PATENT_FILE_FREEZES ON VW_IMPORT_PATENT_FILE_FREEZES(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_PATENT_FI_FRZ_RESULT(    FILE_SEQ            VARCHAR(2)  NOT NULL,    FILE_TYPE           VARCHAR(1)  NOT NULL,    FILE_SERIES         NUMERIC(4,0) NOT NULL,    FILE_NBR            NUMERIC(10,0) NOT NULL,    FREEZING_FILE_SEQ   VARCHAR(2)  NOT NULL,    FREEZING_FILE_TYPE  VARCHAR(1)  NOT NULL,    FREEZING_FILE_SERIES NUMERIC(4,0) NOT NULL,    FREEZING_FILE_NBR   NUMERIC(10,0) NOT NULL,    IND_IMPORT          NUMERIC(20,0),         /* indicator (0/1) that the row was imported successfully */    MSG_IMPORT          VARCHAR(300)         /* error message explaining why the row could not be imported. */);;
CREATE TABLE VW_IMPORT_PATENT_UDOC_FREEZES(FILE_SEQ            VARCHAR(2)  NOT NULL,FILE_TYPE           VARCHAR(1)  NOT NULL,FILE_SERIES         NUMERIC(4) NOT NULL,FILE_NBR            NUMERIC(10) NOT NULL,FREEZING_USERDOC_SEQ      VARCHAR(12) NOT NULL,FREEZING_USERDOC_SERIES   NUMERIC(4) NOT NULL,FREEZING_USERDOC_NBR      NUMERIC(15) NOT NULL,IND_IMPORT          NUMERIC(1,0),				/* indicator (0/1) that the row was imported successfully */   CONSTRAINT VW_PAT_UDOC_FREEZES_FK_PAT FOREIGN KEY (FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR) REFERENCES VW_IMPORT_PATENT  ON DELETE CASCADE,   CONSTRAINT VW_PAT_UDOC_FREEZES_FK_UDOC FOREIGN KEY (FREEZING_USERDOC_SEQ, FREEZING_USERDOC_SERIES, FREEZING_USERDOC_NBR) REFERENCES VW_IMPORT_USERDOC ON DELETE CASCADE);;
CREATE INDEX PATENT_UDOC_FREEZES ON VW_IMPORT_PATENT_UDOC_FREEZES(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);;
CREATE TABLE VW_IMPORT_PATENT_UD_FRZ_RESULT(    FILE_SEQ            VARCHAR(2)  NOT NULL,    FILE_TYPE           VARCHAR(1)  NOT NULL,    FILE_SERIES         NUMERIC(4,0) NOT NULL,    FILE_NBR            NUMERIC(10,0) NOT NULL,    FREEZING_USERDOC_SEQ      VARCHAR(12) NOT NULL,    FREEZING_USERDOC_SERIES   NUMERIC(4,0) NOT NULL,    FREEZING_USERDOC_NBR      NUMERIC(15,0) NOT NULL,    IND_IMPORT          NUMERIC(20,0),         /* indicator (0/1) that the row was imported successfully */    MSG_IMPORT          VARCHAR(300)         /* error message explaining why the row could not be imported. */);;
CREATE TABLE VW_IMPORT_EXPORT_CONTROL (    PROCESS_DATE	DATETIME);;
CREATE TABLE VW_IMPORT_CODES(	CODE_TYPE						VARCHAR(40) NOT NULL ,    CODE_VALUE_LEVEL1 	VARCHAR(20),    CODE_VALUE_LEVEL2 	VARCHAR(20),    CODE_VALUE_LEVEL3 	VARCHAR(20),    CODE_VALUE_LEVEL4 	VARCHAR(20),    CODE_VALUE_LEVEL5 	VARCHAR(20),    CODE_VALUE_LEVEL6 	VARCHAR(20),		CODE_DESCRIPTION		VARCHAR(254)    );;
